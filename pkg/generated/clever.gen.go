// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// AdminName defines model for AdminName.
type AdminName struct {
	First *string `json:"first,omitempty"`
	Last  *string `json:"last,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message *string `json:"message,omitempty"`
}

// Contact defines model for Contact.
type Contact struct {
	District     *string   `json:"district,omitempty"`
	Email        *string   `json:"email,omitempty"`
	Id           *string   `json:"id,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Phone        *string   `json:"phone,omitempty"`
	PhoneType    *string   `json:"phone_type,omitempty"`
	Relationship *string   `json:"relationship,omitempty"`
	SisId        *string   `json:"sis_id,omitempty"`
	Students     *[]string `json:"students,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// ContactObject defines model for ContactObject.
type ContactObject struct {
	Object *Contact `json:"object,omitempty"`
}

// ContactResponse defines model for ContactResponse.
type ContactResponse struct {
	Data *Contact `json:"data,omitempty"`
}

// ContactsResponse defines model for ContactsResponse.
type ContactsResponse struct {
	Data  *[]ContactResponse `json:"data,omitempty"`
	Links *[]Link            `json:"links,omitempty"`
}

// Course defines model for Course.
type Course struct {
	District *string `json:"district,omitempty"`
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Number   *string `json:"number,omitempty"`
}

// CourseObject defines model for CourseObject.
type CourseObject struct {
	Object *Course `json:"object,omitempty"`
}

// CourseResponse defines model for CourseResponse.
type CourseResponse struct {
	Data *Course `json:"data,omitempty"`
}

// CoursesResponse defines model for CoursesResponse.
type CoursesResponse struct {
	Data  *[]CourseResponse `json:"data,omitempty"`
	Links *[]Link           `json:"links,omitempty"`
}

// Credentials defines model for Credentials.
type Credentials struct {
	DistrictUsername *string `json:"district_username,omitempty"`
}

// District defines model for District.
type District struct {
	DistrictContact *DistrictAdmin `json:"district_contact,omitempty"`
	Error           *string        `json:"error,omitempty"`
	Id              *string        `json:"id,omitempty"`
	LastSync        *string        `json:"last_sync,omitempty"`
	LaunchDate      *string        `json:"launch_date,omitempty"`
	LoginMethods    *[]string      `json:"login_methods,omitempty"`
	MdrNumber       *string        `json:"mdr_number,omitempty"`
	Name            *string        `json:"name,omitempty"`
	NcesId          *string        `json:"nces_id,omitempty"`
	PauseEnd        *string        `json:"pause_end,omitempty"`
	PauseStart      *string        `json:"pause_start,omitempty"`
	PortalUrl       *string        `json:"portal_url,omitempty"`
	SisType         *string        `json:"sis_type,omitempty"`
	State           *string        `json:"state,omitempty"`
}

// DistrictAdmin defines model for DistrictAdmin.
type DistrictAdmin struct {
	District *string    `json:"district,omitempty"`
	Email    *string    `json:"email,omitempty"`
	Id       *string    `json:"id,omitempty"`
	Name     *AdminName `json:"name,omitempty"`
	Title    *string    `json:"title,omitempty"`
}

// DistrictAdminObject defines model for DistrictAdminObject.
type DistrictAdminObject struct {
	Object *DistrictAdmin `json:"object,omitempty"`
}

// DistrictAdminResponse defines model for DistrictAdminResponse.
type DistrictAdminResponse struct {
	Data *DistrictAdmin `json:"data,omitempty"`
}

// DistrictAdminsResponse defines model for DistrictAdminsResponse.
type DistrictAdminsResponse struct {
	Data  *[]DistrictAdminResponse `json:"data,omitempty"`
	Links *[]Link                  `json:"links,omitempty"`
}

// DistrictObject defines model for DistrictObject.
type DistrictObject struct {
	Object *District `json:"object,omitempty"`
}

// DistrictResponse defines model for DistrictResponse.
type DistrictResponse struct {
	Data *District `json:"data,omitempty"`
}

// DistrictsResponse defines model for DistrictsResponse.
type DistrictsResponse struct {
	Data  *[]DistrictResponse `json:"data,omitempty"`
	Links *[]Link             `json:"links,omitempty"`
}

// Event defines model for Event.
type Event struct {
	Created *string `json:"created,omitempty"`
	Id      *string `json:"id,omitempty"`
	Type    string  `json:"type"`
}

// EventResponse defines model for EventResponse.
type EventResponse struct {
	Data *Event `json:"data,omitempty"`
}

// EventsResponse defines model for EventsResponse.
type EventsResponse struct {
	Data  *[]EventResponse `json:"data,omitempty"`
	Links *[]Link          `json:"links,omitempty"`
}

// InternalError defines model for InternalError.
type InternalError struct {
	Message *string `json:"message,omitempty"`
}

// Link defines model for Link.
type Link struct {
	Rel *string `json:"rel,omitempty"`
	Uri *string `json:"uri,omitempty"`
}

// Location defines model for Location.
type Location struct {
	Address *string `json:"address,omitempty"`
	City    *string `json:"city,omitempty"`
	Lat     *string `json:"lat,omitempty"`
	Lon     *string `json:"lon,omitempty"`
	State   *string `json:"state,omitempty"`
	Zip     *string `json:"zip,omitempty"`
}

// Name defines model for Name.
type Name struct {
	First  *string `json:"first,omitempty"`
	Last   *string `json:"last,omitempty"`
	Middle *string `json:"middle,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Message *string `json:"message,omitempty"`
}

// Principal defines model for Principal.
type Principal struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// School defines model for School.
type School struct {
	Created      *string                 `json:"created,omitempty"`
	District     *string                 `json:"district,omitempty"`
	Ext          *map[string]interface{} `json:"ext,omitempty"`
	HighGrade    *string                 `json:"high_grade,omitempty"`
	Id           *string                 `json:"id,omitempty"`
	LastModified *string                 `json:"last_modified,omitempty"`
	Location     *Location               `json:"location,omitempty"`
	LowGrade     *string                 `json:"low_grade,omitempty"`
	MdrNumber    *string                 `json:"mdr_number,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	NcesId       *string                 `json:"nces_id,omitempty"`
	Phone        *string                 `json:"phone,omitempty"`
	Principal    *Principal              `json:"principal,omitempty"`
	SchoolNumber *string                 `json:"school_number,omitempty"`
	SisId        *string                 `json:"sis_id,omitempty"`
	StateId      *string                 `json:"state_id,omitempty"`
}

// SchoolAdmin defines model for SchoolAdmin.
type SchoolAdmin struct {
	Credentials *Credentials            `json:"credentials,omitempty"`
	Department  *string                 `json:"department,omitempty"`
	District    *string                 `json:"district,omitempty"`
	Email       *string                 `json:"email,omitempty"`
	Ext         *map[string]interface{} `json:"ext,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	Name        *AdminName              `json:"name,omitempty"`
	Schools     *[]string               `json:"schools,omitempty"`
	StaffId     *string                 `json:"staff_id,omitempty"`
	Title       *string                 `json:"title,omitempty"`
}

// SchoolAdminObject defines model for SchoolAdminObject.
type SchoolAdminObject struct {
	Object *SchoolAdmin `json:"object,omitempty"`
}

// SchoolAdminResponse defines model for SchoolAdminResponse.
type SchoolAdminResponse struct {
	Data *SchoolAdmin `json:"data,omitempty"`
}

// SchoolAdminsResponse defines model for SchoolAdminsResponse.
type SchoolAdminsResponse struct {
	Data  *[]SchoolAdminResponse `json:"data,omitempty"`
	Links *[]Link                `json:"links,omitempty"`
}

// SchoolEnrollment defines model for SchoolEnrollment.
type SchoolEnrollment struct {
	EndDate   *string `json:"end_date,omitempty"`
	School    *string `json:"school,omitempty"`
	StartDate *string `json:"start_date,omitempty"`
}

// SchoolObject defines model for SchoolObject.
type SchoolObject struct {
	Object *School `json:"object,omitempty"`
}

// SchoolResponse defines model for SchoolResponse.
type SchoolResponse struct {
	Data *School `json:"data,omitempty"`
}

// SchoolsResponse defines model for SchoolsResponse.
type SchoolsResponse struct {
	Data  *[]SchoolResponse `json:"data,omitempty"`
	Links *[]Link           `json:"links,omitempty"`
}

// Section defines model for Section.
type Section struct {
	Course        *string                 `json:"course,omitempty"`
	Created       *string                 `json:"created,omitempty"`
	District      *string                 `json:"district,omitempty"`
	Ext           *map[string]interface{} `json:"ext,omitempty"`
	Grade         *string                 `json:"grade,omitempty"`
	Id            *string                 `json:"id,omitempty"`
	LastModified  *string                 `json:"last_modified,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Period        *string                 `json:"period,omitempty"`
	School        *string                 `json:"school,omitempty"`
	SectionNumber *string                 `json:"section_number,omitempty"`
	SisId         *string                 `json:"sis_id,omitempty"`
	Students      *[]string               `json:"students,omitempty"`
	Subject       *string                 `json:"subject,omitempty"`
	Teacher       *string                 `json:"teacher,omitempty"`
	Teachers      *[]string               `json:"teachers,omitempty"`
	TermId        *string                 `json:"term_id,omitempty"`
}

// SectionObject defines model for SectionObject.
type SectionObject struct {
	Object *Section `json:"object,omitempty"`
}

// SectionResponse defines model for SectionResponse.
type SectionResponse struct {
	Data *Section `json:"data,omitempty"`
}

// SectionsResponse defines model for SectionsResponse.
type SectionsResponse struct {
	Data  *[]SectionResponse `json:"data,omitempty"`
	Links *[]Link            `json:"links,omitempty"`
}

// Student defines model for Student.
type Student struct {
	Created           *string                 `json:"created,omitempty"`
	Credentials       *Credentials            `json:"credentials,omitempty"`
	District          *string                 `json:"district,omitempty"`
	Dob               *string                 `json:"dob,omitempty"`
	EllStatus         *string                 `json:"ell_status,omitempty"`
	Email             *string                 `json:"email,omitempty"`
	Enrollments       *[]SchoolEnrollment     `json:"enrollments,omitempty"`
	Ext               *map[string]interface{} `json:"ext,omitempty"`
	Gender            *string                 `json:"gender,omitempty"`
	Grade             *string                 `json:"grade,omitempty"`
	GraduationYear    *string                 `json:"graduation_year,omitempty"`
	HispanicEthnicity *string                 `json:"hispanic_ethnicity,omitempty"`
	HomeLanguage      *string                 `json:"home_language,omitempty"`
	Id                *string                 `json:"id,omitempty"`
	IepStatus         *string                 `json:"iep_status,omitempty"`
	LastModified      *string                 `json:"last_modified,omitempty"`
	Location          *Location               `json:"location,omitempty"`
	Name              *Name                   `json:"name,omitempty"`
	Race              *string                 `json:"race,omitempty"`
	School            *string                 `json:"school,omitempty"`
	Schools           *[]string               `json:"schools,omitempty"`
	SisId             *string                 `json:"sis_id,omitempty"`
	StateId           *string                 `json:"state_id,omitempty"`
	StudentNumber     *string                 `json:"student_number,omitempty"`
	UnweightedGpa     *string                 `json:"unweighted_gpa,omitempty"`
	WeightedGpa       *string                 `json:"weighted_gpa,omitempty"`
}

// StudentObject defines model for StudentObject.
type StudentObject struct {
	Object *Student `json:"object,omitempty"`
}

// StudentResponse defines model for StudentResponse.
type StudentResponse struct {
	Data *Student `json:"data,omitempty"`
}

// StudentsResponse defines model for StudentsResponse.
type StudentsResponse struct {
	Data  *[]StudentResponse `json:"data,omitempty"`
	Links *[]Link            `json:"links,omitempty"`
}

// Teacher defines model for Teacher.
type Teacher struct {
	Created       *string                 `json:"created,omitempty"`
	Credentials   *Credentials            `json:"credentials,omitempty"`
	District      *string                 `json:"district,omitempty"`
	Email         *string                 `json:"email,omitempty"`
	Ext           *map[string]interface{} `json:"ext,omitempty"`
	Id            *string                 `json:"id,omitempty"`
	LastModified  *string                 `json:"last_modified,omitempty"`
	Name          *Name                   `json:"name,omitempty"`
	School        *string                 `json:"school,omitempty"`
	Schools       *[]string               `json:"schools,omitempty"`
	SisId         *string                 `json:"sis_id,omitempty"`
	StateId       *string                 `json:"state_id,omitempty"`
	TeacherNumber *string                 `json:"teacher_number,omitempty"`
	Title         *string                 `json:"title,omitempty"`
}

// TeacherObject defines model for TeacherObject.
type TeacherObject struct {
	Object *Teacher `json:"object,omitempty"`
}

// TeacherResponse defines model for TeacherResponse.
type TeacherResponse struct {
	Data *Teacher `json:"data,omitempty"`
}

// TeachersResponse defines model for TeachersResponse.
type TeachersResponse struct {
	Data  *[]TeacherResponse `json:"data,omitempty"`
	Links *[]Link            `json:"links,omitempty"`
}

// Term defines model for Term.
type Term struct {
	District  *string `json:"district,omitempty"`
	EndDate   *string `json:"end_date,omitempty"`
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	StartDate *string `json:"start_date,omitempty"`
}

// TermObject defines model for TermObject.
type TermObject struct {
	Object *Term `json:"object,omitempty"`
}

// TermResponse defines model for TermResponse.
type TermResponse struct {
	Data *Term `json:"data,omitempty"`
}

// TermsResponse defines model for TermsResponse.
type TermsResponse struct {
	Data  *[]TermResponse `json:"data,omitempty"`
	Links *[]Link         `json:"links,omitempty"`
}

// ContactsCreated defines model for contacts.created.
type ContactsCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *ContactObject `json:"data,omitempty"`
}

// ContactsDeleted defines model for contacts.deleted.
type ContactsDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *ContactObject `json:"data,omitempty"`
}

// ContactsUpdated defines model for contacts.updated.
type ContactsUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *ContactObject                      `json:"data,omitempty"`
	PreviousAttributes *ContactsUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// ContactsUpdated_PreviousAttributes defines model for
// ContactsUpdated.PreviousAttributes.
type ContactsUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// CoursesCreated defines model for courses.created.
type CoursesCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *CourseObject `json:"data,omitempty"`
}

// CoursesDeleted defines model for courses.deleted.
type CoursesDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *CourseObject `json:"data,omitempty"`
}

// CoursesUpdated defines model for courses.updated.
type CoursesUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *CourseObject                      `json:"data,omitempty"`
	PreviousAttributes *CoursesUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// CoursesUpdated_PreviousAttributes defines model for
// CoursesUpdated.PreviousAttributes.
type CoursesUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// DistrictadminsCreated defines model for districtadmins.created.
type DistrictadminsCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *DistrictAdminObject `json:"data,omitempty"`
}

// DistrictadminsDeleted defines model for districtadmins.deleted.
type DistrictadminsDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *DistrictAdminObject `json:"data,omitempty"`
}

// DistrictadminsUpdated defines model for districtadmins.updated.
type DistrictadminsUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *DistrictAdminObject                      `json:"data,omitempty"`
	PreviousAttributes *DistrictadminsUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// DistrictadminsUpdated_PreviousAttributes defines model for
// DistrictadminsUpdated.PreviousAttributes.
type DistrictadminsUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// DistrictsCreated defines model for districts.created.
type DistrictsCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *DistrictObject `json:"data,omitempty"`
}

// DistrictsDeleted defines model for districts.deleted.
type DistrictsDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *DistrictObject `json:"data,omitempty"`
}

// DistrictsUpdated defines model for districts.updated.
type DistrictsUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *DistrictObject                      `json:"data,omitempty"`
	PreviousAttributes *DistrictsUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// DistrictsUpdated_PreviousAttributes defines model for
// DistrictsUpdated.PreviousAttributes.
type DistrictsUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// SchooladminsCreated defines model for schooladmins.created.
type SchooladminsCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *SchoolAdminObject `json:"data,omitempty"`
}

// SchooladminsDeleted defines model for schooladmins.deleted.
type SchooladminsDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *SchoolAdminObject `json:"data,omitempty"`
}

// SchooladminsUpdated defines model for schooladmins.updated.
type SchooladminsUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *SchoolAdminObject                      `json:"data,omitempty"`
	PreviousAttributes *SchooladminsUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// SchooladminsUpdated_PreviousAttributes defines model for
// SchooladminsUpdated.PreviousAttributes.
type SchooladminsUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// SchoolsCreated defines model for schools.created.
type SchoolsCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *SchoolObject `json:"data,omitempty"`
}

// SchoolsDeleted defines model for schools.deleted.
type SchoolsDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *SchoolObject `json:"data,omitempty"`
}

// SchoolsUpdated defines model for schools.updated.
type SchoolsUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *SchoolObject                      `json:"data,omitempty"`
	PreviousAttributes *SchoolsUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// SchoolsUpdated_PreviousAttributes defines model for
// SchoolsUpdated.PreviousAttributes.
type SchoolsUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// SectionsCreated defines model for sections.created.
type SectionsCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *SectionObject `json:"data,omitempty"`
}

// SectionsDeleted defines model for sections.deleted.
type SectionsDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *SectionObject `json:"data,omitempty"`
}

// SectionsUpdated defines model for sections.updated.
type SectionsUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *SectionObject                      `json:"data,omitempty"`
	PreviousAttributes *SectionsUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// SectionsUpdated_PreviousAttributes defines model for
// SectionsUpdated.PreviousAttributes.
type SectionsUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// StudentsCreated defines model for students.created.
type StudentsCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *StudentObject `json:"data,omitempty"`
}

// StudentsDeleted defines model for students.deleted.
type StudentsDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *StudentObject `json:"data,omitempty"`
}

// StudentsUpdated defines model for students.updated.
type StudentsUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *StudentObject                      `json:"data,omitempty"`
	PreviousAttributes *StudentsUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// StudentsUpdated_PreviousAttributes defines model for
// StudentsUpdated.PreviousAttributes.
type StudentsUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// TeachersCreated defines model for teachers.created.
type TeachersCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *TeacherObject `json:"data,omitempty"`
}

// TeachersDeleted defines model for teachers.deleted.
type TeachersDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *TeacherObject `json:"data,omitempty"`
}

// TeachersUpdated defines model for teachers.updated.
type TeachersUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *TeacherObject                      `json:"data,omitempty"`
	PreviousAttributes *TeachersUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// TeachersUpdated_PreviousAttributes defines model for
// TeachersUpdated.PreviousAttributes.
type TeachersUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// TermsCreated defines model for terms.created.
type TermsCreated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *TermObject `json:"data,omitempty"`
}

// TermsDeleted defines model for terms.deleted.
type TermsDeleted struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data *TermObject `json:"data,omitempty"`
}

// TermsUpdated defines model for terms.updated.
type TermsUpdated struct {
	// Embedded struct due to allOf(#/components/schemas/Event)
	Event
	// Embedded fields due to inline allOf schema
	Data               *TermObject                      `json:"data,omitempty"`
	PreviousAttributes *TermsUpdated_PreviousAttributes `json:"previous_attributes,omitempty"`
}

// TermsUpdated_PreviousAttributes defines model for
// TermsUpdated.PreviousAttributes.
type TermsUpdated_PreviousAttributes struct {
	AdditionalProperties map[string]map[string]interface{} `json:"-"`
}

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetStudentsForContactParams defines parameters for GetStudentsForContact.
type GetStudentsForContactParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetCoursesParams defines parameters for GetCourses.
type GetCoursesParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetSectionsForCourseParams defines parameters for GetSectionsForCourse.
type GetSectionsForCourseParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetDistrictAdminsParams defines parameters for GetDistrictAdmins.
type GetDistrictAdminsParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetDistrictsParams defines parameters for GetDistricts.
type GetDistrictsParams struct {
	Count *string `json:"count,omitempty"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	Limit         *int      `json:"limit,omitempty"`
	StartingAfter *string   `json:"starting_after,omitempty"`
	EndingBefore  *string   `json:"ending_before,omitempty"`
	School        *string   `json:"school,omitempty"`
	RecordType    *[]string `json:"record_type,omitempty"`
}

// GetSchoolAdminsParams defines parameters for GetSchoolAdmins.
type GetSchoolAdminsParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetSchoolsForSchoolAdminParams defines parameters for
// GetSchoolsForSchoolAdmin.
type GetSchoolsForSchoolAdminParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetSchoolsParams defines parameters for GetSchools.
type GetSchoolsParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetSectionsForSchoolParams defines parameters for GetSectionsForSchool.
type GetSectionsForSchoolParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetStudentsForSchoolParams defines parameters for GetStudentsForSchool.
type GetStudentsForSchoolParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetTeachersForSchoolParams defines parameters for GetTeachersForSchool.
type GetTeachersForSchoolParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetSectionsParams defines parameters for GetSections.
type GetSectionsParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetStudentsForSectionParams defines parameters for GetStudentsForSection.
type GetStudentsForSectionParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetTeachersForSectionParams defines parameters for GetTeachersForSection.
type GetTeachersForSectionParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetStudentsParams defines parameters for GetStudents.
type GetStudentsParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetContactsForStudentParams defines parameters for GetContactsForStudent.
type GetContactsForStudentParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetSchoolsForStudentParams defines parameters for GetSchoolsForStudent.
type GetSchoolsForStudentParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetSectionsForStudentParams defines parameters for GetSectionsForStudent.
type GetSectionsForStudentParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetTeachersForStudentParams defines parameters for GetTeachersForStudent.
type GetTeachersForStudentParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetTeachersParams defines parameters for GetTeachers.
type GetTeachersParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetSchoolsForTeacherParams defines parameters for GetSchoolsForTeacher.
type GetSchoolsForTeacherParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetSectionsForTeacherParams defines parameters for GetSectionsForTeacher.
type GetSectionsForTeacherParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetStudentsForTeacherParams defines parameters for GetStudentsForTeacher.
type GetStudentsForTeacherParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// GetTermsParams defines parameters for GetTerms.
type GetTermsParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
	Count         *string `json:"count,omitempty"`
}

// GetSectionsForTermParams defines parameters for GetSectionsForTerm.
type GetSectionsForTermParams struct {
	Limit         *int    `json:"limit,omitempty"`
	StartingAfter *string `json:"starting_after,omitempty"`
	EndingBefore  *string `json:"ending_before,omitempty"`
}

// Getter for additional properties for ContactsUpdated_PreviousAttributes.
// Returns the specified
// element and whether it was found
func (a ContactsUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ContactsUpdated_PreviousAttributes
func (a *ContactsUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ContactsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a *ContactsUpdated_PreviousAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ContactsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a ContactsUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CoursesUpdated_PreviousAttributes.
// Returns the specified
// element and whether it was found
func (a CoursesUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CoursesUpdated_PreviousAttributes
func (a *CoursesUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CoursesUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a *CoursesUpdated_PreviousAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CoursesUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a CoursesUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for
// DistrictadminsUpdated_PreviousAttributes. Returns the specified
// element and whether it was found
func (a DistrictadminsUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for
// DistrictadminsUpdated_PreviousAttributes
func (a *DistrictadminsUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DistrictadminsUpdated_PreviousAttributes
// to handle AdditionalProperties
func (a *DistrictadminsUpdated_PreviousAttributes) UnmarshalJSON(
	b []byte,
) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DistrictadminsUpdated_PreviousAttributes
// to handle AdditionalProperties
func (a DistrictadminsUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DistrictsUpdated_PreviousAttributes.
// Returns the specified
// element and whether it was found
func (a DistrictsUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DistrictsUpdated_PreviousAttributes
func (a *DistrictsUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DistrictsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a *DistrictsUpdated_PreviousAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DistrictsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a DistrictsUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for
// SchooladminsUpdated_PreviousAttributes. Returns the specified
// element and whether it was found
func (a SchooladminsUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SchooladminsUpdated_PreviousAttributes
func (a *SchooladminsUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SchooladminsUpdated_PreviousAttributes
// to handle AdditionalProperties
func (a *SchooladminsUpdated_PreviousAttributes) UnmarshalJSON(
	b []byte,
) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SchooladminsUpdated_PreviousAttributes
// to handle AdditionalProperties
func (a SchooladminsUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SchoolsUpdated_PreviousAttributes.
// Returns the specified
// element and whether it was found
func (a SchoolsUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SchoolsUpdated_PreviousAttributes
func (a *SchoolsUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SchoolsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a *SchoolsUpdated_PreviousAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SchoolsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a SchoolsUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SectionsUpdated_PreviousAttributes.
// Returns the specified
// element and whether it was found
func (a SectionsUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SectionsUpdated_PreviousAttributes
func (a *SectionsUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SectionsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a *SectionsUpdated_PreviousAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SectionsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a SectionsUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StudentsUpdated_PreviousAttributes.
// Returns the specified
// element and whether it was found
func (a StudentsUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StudentsUpdated_PreviousAttributes
func (a *StudentsUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StudentsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a *StudentsUpdated_PreviousAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StudentsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a StudentsUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TeachersUpdated_PreviousAttributes.
// Returns the specified
// element and whether it was found
func (a TeachersUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TeachersUpdated_PreviousAttributes
func (a *TeachersUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TeachersUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a *TeachersUpdated_PreviousAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TeachersUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a TeachersUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TermsUpdated_PreviousAttributes.
// Returns the specified
// element and whether it was found
func (a TermsUpdated_PreviousAttributes) Get(
	fieldName string,
) (value map[string]interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TermsUpdated_PreviousAttributes
func (a *TermsUpdated_PreviousAttributes) Set(
	fieldName string,
	value map[string]interface{},
) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TermsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a *TermsUpdated_PreviousAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(
					err,
					fmt.Sprintf("error unmarshaling field %s", fieldName),
				)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TermsUpdated_PreviousAttributes to
// handle AdditionalProperties
func (a TermsUpdated_PreviousAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(
				err,
				fmt.Sprintf("error marshaling '%s'", fieldName),
			)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback
// function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending
	// over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the
// request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetContacts request
	GetContacts(
		ctx context.Context,
		params *GetContactsParams,
	) (*http.Response, error)

	// GetContact request
	GetContact(ctx context.Context, id string) (*http.Response, error)

	// GetDistrictForContact request
	GetDistrictForContact(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetStudentsForContact request
	GetStudentsForContact(
		ctx context.Context,
		id string,
		params *GetStudentsForContactParams,
	) (*http.Response, error)

	// GetCourses request
	GetCourses(
		ctx context.Context,
		params *GetCoursesParams,
	) (*http.Response, error)

	// GetCourse request
	GetCourse(ctx context.Context, id string) (*http.Response, error)

	// GetDistrictForCourse request
	GetDistrictForCourse(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetSectionsForCourse request
	GetSectionsForCourse(
		ctx context.Context,
		id string,
		params *GetSectionsForCourseParams,
	) (*http.Response, error)

	// GetDistrictAdmins request
	GetDistrictAdmins(
		ctx context.Context,
		params *GetDistrictAdminsParams,
	) (*http.Response, error)

	// GetDistrictAdmin request
	GetDistrictAdmin(ctx context.Context, id string) (*http.Response, error)

	// GetDistrictForDistrictAdmin request
	GetDistrictForDistrictAdmin(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetDistricts request
	GetDistricts(
		ctx context.Context,
		params *GetDistrictsParams,
	) (*http.Response, error)

	// GetDistrict request
	GetDistrict(ctx context.Context, id string) (*http.Response, error)

	// GetEvents request
	GetEvents(
		ctx context.Context,
		params *GetEventsParams,
	) (*http.Response, error)

	// GetEvent request
	GetEvent(ctx context.Context, id string) (*http.Response, error)

	// GetSchoolAdmins request
	GetSchoolAdmins(
		ctx context.Context,
		params *GetSchoolAdminsParams,
	) (*http.Response, error)

	// GetSchoolAdmin request
	GetSchoolAdmin(ctx context.Context, id string) (*http.Response, error)

	// GetDistrictForSchoolAdmin request
	GetDistrictForSchoolAdmin(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetSchoolsForSchoolAdmin request
	GetSchoolsForSchoolAdmin(
		ctx context.Context,
		id string,
		params *GetSchoolsForSchoolAdminParams,
	) (*http.Response, error)

	// GetSchools request
	GetSchools(
		ctx context.Context,
		params *GetSchoolsParams,
	) (*http.Response, error)

	// GetSchool request
	GetSchool(ctx context.Context, id string) (*http.Response, error)

	// GetDistrictForSchool request
	GetDistrictForSchool(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetSectionsForSchool request
	GetSectionsForSchool(
		ctx context.Context,
		id string,
		params *GetSectionsForSchoolParams,
	) (*http.Response, error)

	// GetStudentsForSchool request
	GetStudentsForSchool(
		ctx context.Context,
		id string,
		params *GetStudentsForSchoolParams,
	) (*http.Response, error)

	// GetTeachersForSchool request
	GetTeachersForSchool(
		ctx context.Context,
		id string,
		params *GetTeachersForSchoolParams,
	) (*http.Response, error)

	// GetSections request
	GetSections(
		ctx context.Context,
		params *GetSectionsParams,
	) (*http.Response, error)

	// GetSection request
	GetSection(ctx context.Context, id string) (*http.Response, error)

	// GetCourseForSection request
	GetCourseForSection(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetDistrictForSection request
	GetDistrictForSection(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetSchoolForSection request
	GetSchoolForSection(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetStudentsForSection request
	GetStudentsForSection(
		ctx context.Context,
		id string,
		params *GetStudentsForSectionParams,
	) (*http.Response, error)

	// GetTeacherForSection request
	GetTeacherForSection(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetTeachersForSection request
	GetTeachersForSection(
		ctx context.Context,
		id string,
		params *GetTeachersForSectionParams,
	) (*http.Response, error)

	// GetTermForSection request
	GetTermForSection(ctx context.Context, id string) (*http.Response, error)

	// GetStudents request
	GetStudents(
		ctx context.Context,
		params *GetStudentsParams,
	) (*http.Response, error)

	// GetStudent request
	GetStudent(ctx context.Context, id string) (*http.Response, error)

	// GetContactsForStudent request
	GetContactsForStudent(
		ctx context.Context,
		id string,
		params *GetContactsForStudentParams,
	) (*http.Response, error)

	// GetDistrictForStudent request
	GetDistrictForStudent(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetSchoolForStudent request
	GetSchoolForStudent(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetSchoolsForStudent request
	GetSchoolsForStudent(
		ctx context.Context,
		id string,
		params *GetSchoolsForStudentParams,
	) (*http.Response, error)

	// GetSectionsForStudent request
	GetSectionsForStudent(
		ctx context.Context,
		id string,
		params *GetSectionsForStudentParams,
	) (*http.Response, error)

	// GetTeachersForStudent request
	GetTeachersForStudent(
		ctx context.Context,
		id string,
		params *GetTeachersForStudentParams,
	) (*http.Response, error)

	// GetTeachers request
	GetTeachers(
		ctx context.Context,
		params *GetTeachersParams,
	) (*http.Response, error)

	// GetTeacher request
	GetTeacher(ctx context.Context, id string) (*http.Response, error)

	// GetDistrictForTeacher request
	GetDistrictForTeacher(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetSchoolForTeacher request
	GetSchoolForTeacher(
		ctx context.Context,
		id string,
	) (*http.Response, error)

	// GetSchoolsForTeacher request
	GetSchoolsForTeacher(
		ctx context.Context,
		id string,
		params *GetSchoolsForTeacherParams,
	) (*http.Response, error)

	// GetSectionsForTeacher request
	GetSectionsForTeacher(
		ctx context.Context,
		id string,
		params *GetSectionsForTeacherParams,
	) (*http.Response, error)

	// GetStudentsForTeacher request
	GetStudentsForTeacher(
		ctx context.Context,
		id string,
		params *GetStudentsForTeacherParams,
	) (*http.Response, error)

	// GetTerms request
	GetTerms(
		ctx context.Context,
		params *GetTermsParams,
	) (*http.Response, error)

	// GetTerm request
	GetTerm(ctx context.Context, id string) (*http.Response, error)

	// GetDistrictForTerm request
	GetDistrictForTerm(ctx context.Context, id string) (*http.Response, error)

	// GetSectionsForTerm request
	GetSectionsForTerm(
		ctx context.Context,
		id string,
		params *GetSectionsForTermParams,
	) (*http.Response, error)
}

func (c *Client) GetContacts(
	ctx context.Context,
	params *GetContactsParams,
) (*http.Response, error) {
	req, err := NewGetContactsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContact(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetContactRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForContact(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForContactRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudentsForContact(
	ctx context.Context,
	id string,
	params *GetStudentsForContactParams,
) (*http.Response, error) {
	req, err := NewGetStudentsForContactRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCourses(
	ctx context.Context,
	params *GetCoursesParams,
) (*http.Response, error) {
	req, err := NewGetCoursesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCourse(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetCourseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForCourse(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForCourseRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSectionsForCourse(
	ctx context.Context,
	id string,
	params *GetSectionsForCourseParams,
) (*http.Response, error) {
	req, err := NewGetSectionsForCourseRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictAdmins(
	ctx context.Context,
	params *GetDistrictAdminsParams,
) (*http.Response, error) {
	req, err := NewGetDistrictAdminsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictAdmin(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForDistrictAdmin(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForDistrictAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistricts(
	ctx context.Context,
	params *GetDistrictsParams,
) (*http.Response, error) {
	req, err := NewGetDistrictsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrict(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(
	ctx context.Context,
	params *GetEventsParams,
) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvent(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolAdmins(
	ctx context.Context,
	params *GetSchoolAdminsParams,
) (*http.Response, error) {
	req, err := NewGetSchoolAdminsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolAdmin(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetSchoolAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForSchoolAdmin(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForSchoolAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolsForSchoolAdmin(
	ctx context.Context,
	id string,
	params *GetSchoolsForSchoolAdminParams,
) (*http.Response, error) {
	req, err := NewGetSchoolsForSchoolAdminRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchools(
	ctx context.Context,
	params *GetSchoolsParams,
) (*http.Response, error) {
	req, err := NewGetSchoolsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchool(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetSchoolRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForSchool(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForSchoolRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSectionsForSchool(
	ctx context.Context,
	id string,
	params *GetSectionsForSchoolParams,
) (*http.Response, error) {
	req, err := NewGetSectionsForSchoolRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudentsForSchool(
	ctx context.Context,
	id string,
	params *GetStudentsForSchoolParams,
) (*http.Response, error) {
	req, err := NewGetStudentsForSchoolRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeachersForSchool(
	ctx context.Context,
	id string,
	params *GetTeachersForSchoolParams,
) (*http.Response, error) {
	req, err := NewGetTeachersForSchoolRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSections(
	ctx context.Context,
	params *GetSectionsParams,
) (*http.Response, error) {
	req, err := NewGetSectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSection(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetSectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCourseForSection(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetCourseForSectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForSection(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForSectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolForSection(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetSchoolForSectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudentsForSection(
	ctx context.Context,
	id string,
	params *GetStudentsForSectionParams,
) (*http.Response, error) {
	req, err := NewGetStudentsForSectionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeacherForSection(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetTeacherForSectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeachersForSection(
	ctx context.Context,
	id string,
	params *GetTeachersForSectionParams,
) (*http.Response, error) {
	req, err := NewGetTeachersForSectionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTermForSection(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetTermForSectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudents(
	ctx context.Context,
	params *GetStudentsParams,
) (*http.Response, error) {
	req, err := NewGetStudentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudent(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetStudentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactsForStudent(
	ctx context.Context,
	id string,
	params *GetContactsForStudentParams,
) (*http.Response, error) {
	req, err := NewGetContactsForStudentRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForStudent(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForStudentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolForStudent(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetSchoolForStudentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolsForStudent(
	ctx context.Context,
	id string,
	params *GetSchoolsForStudentParams,
) (*http.Response, error) {
	req, err := NewGetSchoolsForStudentRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSectionsForStudent(
	ctx context.Context,
	id string,
	params *GetSectionsForStudentParams,
) (*http.Response, error) {
	req, err := NewGetSectionsForStudentRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeachersForStudent(
	ctx context.Context,
	id string,
	params *GetTeachersForStudentParams,
) (*http.Response, error) {
	req, err := NewGetTeachersForStudentRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeachers(
	ctx context.Context,
	params *GetTeachersParams,
) (*http.Response, error) {
	req, err := NewGetTeachersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeacher(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetTeacherRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForTeacher(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForTeacherRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolForTeacher(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetSchoolForTeacherRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolsForTeacher(
	ctx context.Context,
	id string,
	params *GetSchoolsForTeacherParams,
) (*http.Response, error) {
	req, err := NewGetSchoolsForTeacherRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSectionsForTeacher(
	ctx context.Context,
	id string,
	params *GetSectionsForTeacherParams,
) (*http.Response, error) {
	req, err := NewGetSectionsForTeacherRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudentsForTeacher(
	ctx context.Context,
	id string,
	params *GetStudentsForTeacherParams,
) (*http.Response, error) {
	req, err := NewGetStudentsForTeacherRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTerms(
	ctx context.Context,
	params *GetTermsParams,
) (*http.Response, error) {
	req, err := NewGetTermsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTerm(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetTermRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistrictForTerm(
	ctx context.Context,
	id string,
) (*http.Response, error) {
	req, err := NewGetDistrictForTermRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSectionsForTerm(
	ctx context.Context,
	id string,
	params *GetSectionsForTermParams,
) (*http.Response, error) {
	req, err := NewGetSectionsForTermRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetContactsRequest generates requests for GetContacts
func NewGetContactsRequest(
	server string,
	params *GetContactsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactRequest generates requests for GetContact
func NewGetContactRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForContactRequest generates requests for
// GetDistrictForContact
func NewGetDistrictForContactRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contacts/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudentsForContactRequest generates requests for
// GetStudentsForContact
func NewGetStudentsForContactRequest(
	server string,
	id string,
	params *GetStudentsForContactParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contacts/%s/students", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCoursesRequest generates requests for GetCourses
func NewGetCoursesRequest(
	server string,
	params *GetCoursesParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/courses")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCourseRequest generates requests for GetCourse
func NewGetCourseRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/courses/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForCourseRequest generates requests for GetDistrictForCourse
func NewGetDistrictForCourseRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/courses/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSectionsForCourseRequest generates requests for GetSectionsForCourse
func NewGetSectionsForCourseRequest(
	server string,
	id string,
	params *GetSectionsForCourseParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/courses/%s/sections", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictAdminsRequest generates requests for GetDistrictAdmins
func NewGetDistrictAdminsRequest(
	server string,
	params *GetDistrictAdminsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/district_admins")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictAdminRequest generates requests for GetDistrictAdmin
func NewGetDistrictAdminRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/district_admins/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForDistrictAdminRequest generates requests for
// GetDistrictForDistrictAdmin
func NewGetDistrictForDistrictAdminRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/district_admins/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictsRequest generates requests for GetDistricts
func NewGetDistrictsRequest(
	server string,
	params *GetDistrictsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/districts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictRequest generates requests for GetDistrict
func NewGetDistrictRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/districts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(
	server string,
	params *GetEventsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/events")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.School != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "school", *params.School); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RecordType != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "record_type", *params.RecordType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventRequest generates requests for GetEvent
func NewGetEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/events/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolAdminsRequest generates requests for GetSchoolAdmins
func NewGetSchoolAdminsRequest(
	server string,
	params *GetSchoolAdminsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/school_admins")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolAdminRequest generates requests for GetSchoolAdmin
func NewGetSchoolAdminRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/school_admins/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForSchoolAdminRequest generates requests for
// GetDistrictForSchoolAdmin
func NewGetDistrictForSchoolAdminRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/school_admins/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolsForSchoolAdminRequest generates requests for
// GetSchoolsForSchoolAdmin
func NewGetSchoolsForSchoolAdminRequest(
	server string,
	id string,
	params *GetSchoolsForSchoolAdminParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/school_admins/%s/schools", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolsRequest generates requests for GetSchools
func NewGetSchoolsRequest(
	server string,
	params *GetSchoolsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/schools")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolRequest generates requests for GetSchool
func NewGetSchoolRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/schools/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForSchoolRequest generates requests for GetDistrictForSchool
func NewGetDistrictForSchoolRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/schools/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSectionsForSchoolRequest generates requests for GetSectionsForSchool
func NewGetSectionsForSchoolRequest(
	server string,
	id string,
	params *GetSectionsForSchoolParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/schools/%s/sections", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudentsForSchoolRequest generates requests for GetStudentsForSchool
func NewGetStudentsForSchoolRequest(
	server string,
	id string,
	params *GetStudentsForSchoolParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/schools/%s/students", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeachersForSchoolRequest generates requests for GetTeachersForSchool
func NewGetTeachersForSchoolRequest(
	server string,
	id string,
	params *GetTeachersForSchoolParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/schools/%s/teachers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSectionsRequest generates requests for GetSections
func NewGetSectionsRequest(
	server string,
	params *GetSectionsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSectionRequest generates requests for GetSection
func NewGetSectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCourseForSectionRequest generates requests for GetCourseForSection
func NewGetCourseForSectionRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections/%s/course", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForSectionRequest generates requests for
// GetDistrictForSection
func NewGetDistrictForSectionRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolForSectionRequest generates requests for GetSchoolForSection
func NewGetSchoolForSectionRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections/%s/school", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudentsForSectionRequest generates requests for
// GetStudentsForSection
func NewGetStudentsForSectionRequest(
	server string,
	id string,
	params *GetStudentsForSectionParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections/%s/students", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeacherForSectionRequest generates requests for GetTeacherForSection
func NewGetTeacherForSectionRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections/%s/teacher", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeachersForSectionRequest generates requests for
// GetTeachersForSection
func NewGetTeachersForSectionRequest(
	server string,
	id string,
	params *GetTeachersForSectionParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections/%s/teachers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTermForSectionRequest generates requests for GetTermForSection
func NewGetTermForSectionRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sections/%s/term", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudentsRequest generates requests for GetStudents
func NewGetStudentsRequest(
	server string,
	params *GetStudentsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/students")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudentRequest generates requests for GetStudent
func NewGetStudentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/students/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactsForStudentRequest generates requests for
// GetContactsForStudent
func NewGetContactsForStudentRequest(
	server string,
	id string,
	params *GetContactsForStudentParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/students/%s/contacts", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForStudentRequest generates requests for
// GetDistrictForStudent
func NewGetDistrictForStudentRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/students/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolForStudentRequest generates requests for GetSchoolForStudent
func NewGetSchoolForStudentRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/students/%s/school", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolsForStudentRequest generates requests for GetSchoolsForStudent
func NewGetSchoolsForStudentRequest(
	server string,
	id string,
	params *GetSchoolsForStudentParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/students/%s/schools", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSectionsForStudentRequest generates requests for
// GetSectionsForStudent
func NewGetSectionsForStudentRequest(
	server string,
	id string,
	params *GetSectionsForStudentParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/students/%s/sections", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeachersForStudentRequest generates requests for
// GetTeachersForStudent
func NewGetTeachersForStudentRequest(
	server string,
	id string,
	params *GetTeachersForStudentParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/students/%s/teachers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeachersRequest generates requests for GetTeachers
func NewGetTeachersRequest(
	server string,
	params *GetTeachersParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/teachers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeacherRequest generates requests for GetTeacher
func NewGetTeacherRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/teachers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForTeacherRequest generates requests for
// GetDistrictForTeacher
func NewGetDistrictForTeacherRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/teachers/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolForTeacherRequest generates requests for GetSchoolForTeacher
func NewGetSchoolForTeacherRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/teachers/%s/school", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolsForTeacherRequest generates requests for GetSchoolsForTeacher
func NewGetSchoolsForTeacherRequest(
	server string,
	id string,
	params *GetSchoolsForTeacherParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/teachers/%s/schools", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSectionsForTeacherRequest generates requests for
// GetSectionsForTeacher
func NewGetSectionsForTeacherRequest(
	server string,
	id string,
	params *GetSectionsForTeacherParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/teachers/%s/sections", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudentsForTeacherRequest generates requests for
// GetStudentsForTeacher
func NewGetStudentsForTeacherRequest(
	server string,
	id string,
	params *GetStudentsForTeacherParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/teachers/%s/students", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTermsRequest generates requests for GetTerms
func NewGetTermsRequest(
	server string,
	params *GetTermsParams,
) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/terms")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "count", *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTermRequest generates requests for GetTerm
func NewGetTermRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/terms/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistrictForTermRequest generates requests for GetDistrictForTerm
func NewGetDistrictForTermRequest(
	server string,
	id string,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/terms/%s/district", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSectionsForTermRequest generates requests for GetSectionsForTerm
func NewGetSectionsForTermRequest(
	server string,
	id string,
	params *GetSectionsForTermParams,
) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/terms/%s/sections", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingAfter != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "starting_after", *params.StartingAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ending_before", *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(
	server string,
	opts ...ClientOption,
) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		if !strings.HasSuffix(baseURL, "/") {
			baseURL += "/"
		}
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

type getContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactsResponse
}

// Status returns HTTPResponse.Status
func (r getContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudentsForContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StudentsResponse
}

// Status returns HTTPResponse.Status
func (r getStudentsForContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudentsForContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getCoursesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CoursesResponse
}

// Status returns HTTPResponse.Status
func (r getCoursesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getCoursesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getCourseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CourseResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getCourseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getCourseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForCourseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForCourseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForCourseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSectionsForCourseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SectionsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSectionsForCourseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSectionsForCourseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictAdminsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictAdminsResponse
}

// Status returns HTTPResponse.Status
func (r getDistrictAdminsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictAdminsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictAdminResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForDistrictAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForDistrictAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForDistrictAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictsResponse
}

// Status returns HTTPResponse.Status
func (r getDistrictsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolAdminsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolAdminsResponse
}

// Status returns HTTPResponse.Status
func (r getSchoolAdminsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolAdminsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolAdminResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSchoolAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForSchoolAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForSchoolAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForSchoolAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolsForSchoolAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSchoolsForSchoolAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolsForSchoolAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolsResponse
}

// Status returns HTTPResponse.Status
func (r getSchoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSchoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForSchoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForSchoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForSchoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSectionsForSchoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SectionsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSectionsForSchoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSectionsForSchoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudentsForSchoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StudentsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getStudentsForSchoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudentsForSchoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTeachersForSchoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeachersResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getTeachersForSchoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTeachersForSchoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SectionsResponse
}

// Status returns HTTPResponse.Status
func (r getSectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SectionResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getCourseForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CourseResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getCourseForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getCourseForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSchoolForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudentsForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StudentsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getStudentsForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudentsForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTeacherForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeacherResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getTeacherForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTeacherForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTeachersForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeachersResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getTeachersForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTeachersForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTermForSectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TermResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getTermForSectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTermForSectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StudentsResponse
}

// Status returns HTTPResponse.Status
func (r getStudentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StudentResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getContactsForStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getContactsForStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContactsForStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolForStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSchoolForStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolForStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolsForStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSchoolsForStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolsForStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSectionsForStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SectionsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSectionsForStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSectionsForStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTeachersForStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeachersResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getTeachersForStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTeachersForStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTeachersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeachersResponse
}

// Status returns HTTPResponse.Status
func (r getTeachersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTeachersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTeacherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeacherResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getTeacherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTeacherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForTeacherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForTeacherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForTeacherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolForTeacherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSchoolForTeacherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolForTeacherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSchoolsForTeacherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchoolsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSchoolsForTeacherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSchoolsForTeacherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSectionsForTeacherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SectionsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSectionsForTeacherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSectionsForTeacherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudentsForTeacherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StudentsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getStudentsForTeacherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudentsForTeacherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTermsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TermsResponse
}

// Status returns HTTPResponse.Status
func (r getTermsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTermsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTermResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TermResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getTermResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTermResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getDistrictForTermResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DistrictResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getDistrictForTermResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getDistrictForTermResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSectionsForTermResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SectionsResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r getSectionsForTermResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSectionsForTermResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetContactsWithResponse request returning *GetContactsResponse
func (c *ClientWithResponses) GetContactsWithResponse(
	ctx context.Context,
	params *GetContactsParams,
) (*getContactsResponse, error) {
	rsp, err := c.GetContacts(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsResponse(rsp)
}

// GetContactWithResponse request returning *GetContactResponse
func (c *ClientWithResponses) GetContactWithResponse(
	ctx context.Context,
	id string,
) (*getContactResponse, error) {
	rsp, err := c.GetContact(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetContactResponse(rsp)
}

// GetDistrictForContactWithResponse request returning
// *GetDistrictForContactResponse
func (c *ClientWithResponses) GetDistrictForContactWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForContactResponse, error) {
	rsp, err := c.GetDistrictForContact(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForContactResponse(rsp)
}

// GetStudentsForContactWithResponse request returning
// *GetStudentsForContactResponse
func (c *ClientWithResponses) GetStudentsForContactWithResponse(
	ctx context.Context,
	id string,
	params *GetStudentsForContactParams,
) (*getStudentsForContactResponse, error) {
	rsp, err := c.GetStudentsForContact(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStudentsForContactResponse(rsp)
}

// GetCoursesWithResponse request returning *GetCoursesResponse
func (c *ClientWithResponses) GetCoursesWithResponse(
	ctx context.Context,
	params *GetCoursesParams,
) (*getCoursesResponse, error) {
	rsp, err := c.GetCourses(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCoursesResponse(rsp)
}

// GetCourseWithResponse request returning *GetCourseResponse
func (c *ClientWithResponses) GetCourseWithResponse(
	ctx context.Context,
	id string,
) (*getCourseResponse, error) {
	rsp, err := c.GetCourse(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetCourseResponse(rsp)
}

// GetDistrictForCourseWithResponse request returning
// *GetDistrictForCourseResponse
func (c *ClientWithResponses) GetDistrictForCourseWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForCourseResponse, error) {
	rsp, err := c.GetDistrictForCourse(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForCourseResponse(rsp)
}

// GetSectionsForCourseWithResponse request returning
// *GetSectionsForCourseResponse
func (c *ClientWithResponses) GetSectionsForCourseWithResponse(
	ctx context.Context,
	id string,
	params *GetSectionsForCourseParams,
) (*getSectionsForCourseResponse, error) {
	rsp, err := c.GetSectionsForCourse(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionsForCourseResponse(rsp)
}

// GetDistrictAdminsWithResponse request returning *GetDistrictAdminsResponse
func (c *ClientWithResponses) GetDistrictAdminsWithResponse(
	ctx context.Context,
	params *GetDistrictAdminsParams,
) (*getDistrictAdminsResponse, error) {
	rsp, err := c.GetDistrictAdmins(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictAdminsResponse(rsp)
}

// GetDistrictAdminWithResponse request returning *GetDistrictAdminResponse
func (c *ClientWithResponses) GetDistrictAdminWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictAdminResponse, error) {
	rsp, err := c.GetDistrictAdmin(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictAdminResponse(rsp)
}

// GetDistrictForDistrictAdminWithResponse request returning
// *GetDistrictForDistrictAdminResponse
func (c *ClientWithResponses) GetDistrictForDistrictAdminWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForDistrictAdminResponse, error) {
	rsp, err := c.GetDistrictForDistrictAdmin(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForDistrictAdminResponse(rsp)
}

// GetDistrictsWithResponse request returning *GetDistrictsResponse
func (c *ClientWithResponses) GetDistrictsWithResponse(
	ctx context.Context,
	params *GetDistrictsParams,
) (*getDistrictsResponse, error) {
	rsp, err := c.GetDistricts(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictsResponse(rsp)
}

// GetDistrictWithResponse request returning *GetDistrictResponse
func (c *ClientWithResponses) GetDistrictWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictResponse, error) {
	rsp, err := c.GetDistrict(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(
	ctx context.Context,
	params *GetEventsParams,
) (*getEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// GetEventWithResponse request returning *GetEventResponse
func (c *ClientWithResponses) GetEventWithResponse(
	ctx context.Context,
	id string,
) (*getEventResponse, error) {
	rsp, err := c.GetEvent(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetEventResponse(rsp)
}

// GetSchoolAdminsWithResponse request returning *GetSchoolAdminsResponse
func (c *ClientWithResponses) GetSchoolAdminsWithResponse(
	ctx context.Context,
	params *GetSchoolAdminsParams,
) (*getSchoolAdminsResponse, error) {
	rsp, err := c.GetSchoolAdmins(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolAdminsResponse(rsp)
}

// GetSchoolAdminWithResponse request returning *GetSchoolAdminResponse
func (c *ClientWithResponses) GetSchoolAdminWithResponse(
	ctx context.Context,
	id string,
) (*getSchoolAdminResponse, error) {
	rsp, err := c.GetSchoolAdmin(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolAdminResponse(rsp)
}

// GetDistrictForSchoolAdminWithResponse request returning
// *GetDistrictForSchoolAdminResponse
func (c *ClientWithResponses) GetDistrictForSchoolAdminWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForSchoolAdminResponse, error) {
	rsp, err := c.GetDistrictForSchoolAdmin(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForSchoolAdminResponse(rsp)
}

// GetSchoolsForSchoolAdminWithResponse request returning
// *GetSchoolsForSchoolAdminResponse
func (c *ClientWithResponses) GetSchoolsForSchoolAdminWithResponse(
	ctx context.Context,
	id string,
	params *GetSchoolsForSchoolAdminParams,
) (*getSchoolsForSchoolAdminResponse, error) {
	rsp, err := c.GetSchoolsForSchoolAdmin(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolsForSchoolAdminResponse(rsp)
}

// GetSchoolsWithResponse request returning *GetSchoolsResponse
func (c *ClientWithResponses) GetSchoolsWithResponse(
	ctx context.Context,
	params *GetSchoolsParams,
) (*getSchoolsResponse, error) {
	rsp, err := c.GetSchools(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolsResponse(rsp)
}

// GetSchoolWithResponse request returning *GetSchoolResponse
func (c *ClientWithResponses) GetSchoolWithResponse(
	ctx context.Context,
	id string,
) (*getSchoolResponse, error) {
	rsp, err := c.GetSchool(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolResponse(rsp)
}

// GetDistrictForSchoolWithResponse request returning
// *GetDistrictForSchoolResponse
func (c *ClientWithResponses) GetDistrictForSchoolWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForSchoolResponse, error) {
	rsp, err := c.GetDistrictForSchool(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForSchoolResponse(rsp)
}

// GetSectionsForSchoolWithResponse request returning
// *GetSectionsForSchoolResponse
func (c *ClientWithResponses) GetSectionsForSchoolWithResponse(
	ctx context.Context,
	id string,
	params *GetSectionsForSchoolParams,
) (*getSectionsForSchoolResponse, error) {
	rsp, err := c.GetSectionsForSchool(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionsForSchoolResponse(rsp)
}

// GetStudentsForSchoolWithResponse request returning
// *GetStudentsForSchoolResponse
func (c *ClientWithResponses) GetStudentsForSchoolWithResponse(
	ctx context.Context,
	id string,
	params *GetStudentsForSchoolParams,
) (*getStudentsForSchoolResponse, error) {
	rsp, err := c.GetStudentsForSchool(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStudentsForSchoolResponse(rsp)
}

// GetTeachersForSchoolWithResponse request returning
// *GetTeachersForSchoolResponse
func (c *ClientWithResponses) GetTeachersForSchoolWithResponse(
	ctx context.Context,
	id string,
	params *GetTeachersForSchoolParams,
) (*getTeachersForSchoolResponse, error) {
	rsp, err := c.GetTeachersForSchool(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTeachersForSchoolResponse(rsp)
}

// GetSectionsWithResponse request returning *GetSectionsResponse
func (c *ClientWithResponses) GetSectionsWithResponse(
	ctx context.Context,
	params *GetSectionsParams,
) (*getSectionsResponse, error) {
	rsp, err := c.GetSections(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionsResponse(rsp)
}

// GetSectionWithResponse request returning *GetSectionResponse
func (c *ClientWithResponses) GetSectionWithResponse(
	ctx context.Context,
	id string,
) (*getSectionResponse, error) {
	rsp, err := c.GetSection(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionResponse(rsp)
}

// GetCourseForSectionWithResponse request returning
// *GetCourseForSectionResponse
func (c *ClientWithResponses) GetCourseForSectionWithResponse(
	ctx context.Context,
	id string,
) (*getCourseForSectionResponse, error) {
	rsp, err := c.GetCourseForSection(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetCourseForSectionResponse(rsp)
}

// GetDistrictForSectionWithResponse request returning
// *GetDistrictForSectionResponse
func (c *ClientWithResponses) GetDistrictForSectionWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForSectionResponse, error) {
	rsp, err := c.GetDistrictForSection(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForSectionResponse(rsp)
}

// GetSchoolForSectionWithResponse request returning
// *GetSchoolForSectionResponse
func (c *ClientWithResponses) GetSchoolForSectionWithResponse(
	ctx context.Context,
	id string,
) (*getSchoolForSectionResponse, error) {
	rsp, err := c.GetSchoolForSection(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolForSectionResponse(rsp)
}

// GetStudentsForSectionWithResponse request returning
// *GetStudentsForSectionResponse
func (c *ClientWithResponses) GetStudentsForSectionWithResponse(
	ctx context.Context,
	id string,
	params *GetStudentsForSectionParams,
) (*getStudentsForSectionResponse, error) {
	rsp, err := c.GetStudentsForSection(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStudentsForSectionResponse(rsp)
}

// GetTeacherForSectionWithResponse request returning
// *GetTeacherForSectionResponse
func (c *ClientWithResponses) GetTeacherForSectionWithResponse(
	ctx context.Context,
	id string,
) (*getTeacherForSectionResponse, error) {
	rsp, err := c.GetTeacherForSection(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetTeacherForSectionResponse(rsp)
}

// GetTeachersForSectionWithResponse request returning
// *GetTeachersForSectionResponse
func (c *ClientWithResponses) GetTeachersForSectionWithResponse(
	ctx context.Context,
	id string,
	params *GetTeachersForSectionParams,
) (*getTeachersForSectionResponse, error) {
	rsp, err := c.GetTeachersForSection(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTeachersForSectionResponse(rsp)
}

// GetTermForSectionWithResponse request returning *GetTermForSectionResponse
func (c *ClientWithResponses) GetTermForSectionWithResponse(
	ctx context.Context,
	id string,
) (*getTermForSectionResponse, error) {
	rsp, err := c.GetTermForSection(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetTermForSectionResponse(rsp)
}

// GetStudentsWithResponse request returning *GetStudentsResponse
func (c *ClientWithResponses) GetStudentsWithResponse(
	ctx context.Context,
	params *GetStudentsParams,
) (*getStudentsResponse, error) {
	rsp, err := c.GetStudents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStudentsResponse(rsp)
}

// GetStudentWithResponse request returning *GetStudentResponse
func (c *ClientWithResponses) GetStudentWithResponse(
	ctx context.Context,
	id string,
) (*getStudentResponse, error) {
	rsp, err := c.GetStudent(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetStudentResponse(rsp)
}

// GetContactsForStudentWithResponse request returning
// *GetContactsForStudentResponse
func (c *ClientWithResponses) GetContactsForStudentWithResponse(
	ctx context.Context,
	id string,
	params *GetContactsForStudentParams,
) (*getContactsForStudentResponse, error) {
	rsp, err := c.GetContactsForStudent(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsForStudentResponse(rsp)
}

// GetDistrictForStudentWithResponse request returning
// *GetDistrictForStudentResponse
func (c *ClientWithResponses) GetDistrictForStudentWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForStudentResponse, error) {
	rsp, err := c.GetDistrictForStudent(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForStudentResponse(rsp)
}

// GetSchoolForStudentWithResponse request returning
// *GetSchoolForStudentResponse
func (c *ClientWithResponses) GetSchoolForStudentWithResponse(
	ctx context.Context,
	id string,
) (*getSchoolForStudentResponse, error) {
	rsp, err := c.GetSchoolForStudent(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolForStudentResponse(rsp)
}

// GetSchoolsForStudentWithResponse request returning
// *GetSchoolsForStudentResponse
func (c *ClientWithResponses) GetSchoolsForStudentWithResponse(
	ctx context.Context,
	id string,
	params *GetSchoolsForStudentParams,
) (*getSchoolsForStudentResponse, error) {
	rsp, err := c.GetSchoolsForStudent(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolsForStudentResponse(rsp)
}

// GetSectionsForStudentWithResponse request returning
// *GetSectionsForStudentResponse
func (c *ClientWithResponses) GetSectionsForStudentWithResponse(
	ctx context.Context,
	id string,
	params *GetSectionsForStudentParams,
) (*getSectionsForStudentResponse, error) {
	rsp, err := c.GetSectionsForStudent(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionsForStudentResponse(rsp)
}

// GetTeachersForStudentWithResponse request returning
// *GetTeachersForStudentResponse
func (c *ClientWithResponses) GetTeachersForStudentWithResponse(
	ctx context.Context,
	id string,
	params *GetTeachersForStudentParams,
) (*getTeachersForStudentResponse, error) {
	rsp, err := c.GetTeachersForStudent(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTeachersForStudentResponse(rsp)
}

// GetTeachersWithResponse request returning *GetTeachersResponse
func (c *ClientWithResponses) GetTeachersWithResponse(
	ctx context.Context,
	params *GetTeachersParams,
) (*getTeachersResponse, error) {
	rsp, err := c.GetTeachers(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTeachersResponse(rsp)
}

// GetTeacherWithResponse request returning *GetTeacherResponse
func (c *ClientWithResponses) GetTeacherWithResponse(
	ctx context.Context,
	id string,
) (*getTeacherResponse, error) {
	rsp, err := c.GetTeacher(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetTeacherResponse(rsp)
}

// GetDistrictForTeacherWithResponse request returning
// *GetDistrictForTeacherResponse
func (c *ClientWithResponses) GetDistrictForTeacherWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForTeacherResponse, error) {
	rsp, err := c.GetDistrictForTeacher(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForTeacherResponse(rsp)
}

// GetSchoolForTeacherWithResponse request returning
// *GetSchoolForTeacherResponse
func (c *ClientWithResponses) GetSchoolForTeacherWithResponse(
	ctx context.Context,
	id string,
) (*getSchoolForTeacherResponse, error) {
	rsp, err := c.GetSchoolForTeacher(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolForTeacherResponse(rsp)
}

// GetSchoolsForTeacherWithResponse request returning
// *GetSchoolsForTeacherResponse
func (c *ClientWithResponses) GetSchoolsForTeacherWithResponse(
	ctx context.Context,
	id string,
	params *GetSchoolsForTeacherParams,
) (*getSchoolsForTeacherResponse, error) {
	rsp, err := c.GetSchoolsForTeacher(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolsForTeacherResponse(rsp)
}

// GetSectionsForTeacherWithResponse request returning
// *GetSectionsForTeacherResponse
func (c *ClientWithResponses) GetSectionsForTeacherWithResponse(
	ctx context.Context,
	id string,
	params *GetSectionsForTeacherParams,
) (*getSectionsForTeacherResponse, error) {
	rsp, err := c.GetSectionsForTeacher(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionsForTeacherResponse(rsp)
}

// GetStudentsForTeacherWithResponse request returning
// *GetStudentsForTeacherResponse
func (c *ClientWithResponses) GetStudentsForTeacherWithResponse(
	ctx context.Context,
	id string,
	params *GetStudentsForTeacherParams,
) (*getStudentsForTeacherResponse, error) {
	rsp, err := c.GetStudentsForTeacher(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStudentsForTeacherResponse(rsp)
}

// GetTermsWithResponse request returning *GetTermsResponse
func (c *ClientWithResponses) GetTermsWithResponse(
	ctx context.Context,
	params *GetTermsParams,
) (*getTermsResponse, error) {
	rsp, err := c.GetTerms(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTermsResponse(rsp)
}

// GetTermWithResponse request returning *GetTermResponse
func (c *ClientWithResponses) GetTermWithResponse(
	ctx context.Context,
	id string,
) (*getTermResponse, error) {
	rsp, err := c.GetTerm(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetTermResponse(rsp)
}

// GetDistrictForTermWithResponse request returning
// *GetDistrictForTermResponse
func (c *ClientWithResponses) GetDistrictForTermWithResponse(
	ctx context.Context,
	id string,
) (*getDistrictForTermResponse, error) {
	rsp, err := c.GetDistrictForTerm(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetDistrictForTermResponse(rsp)
}

// GetSectionsForTermWithResponse request returning
// *GetSectionsForTermResponse
func (c *ClientWithResponses) GetSectionsForTermWithResponse(
	ctx context.Context,
	id string,
	params *GetSectionsForTermParams,
) (*getSectionsForTermResponse, error) {
	rsp, err := c.GetSectionsForTerm(ctx, id, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSectionsForTermResponse(rsp)
}

// ParseGetContactsResponse parses an HTTP response from a
// GetContactsWithResponse call
func ParseGetContactsResponse(
	rsp *http.Response,
) (*getContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactResponse parses an HTTP response from a
// GetContactWithResponse call
func ParseGetContactResponse(
	rsp *http.Response,
) (*getContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForContactResponse parses an HTTP response from a
// GetDistrictForContactWithResponse call
func ParseGetDistrictForContactResponse(
	rsp *http.Response,
) (*getDistrictForContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStudentsForContactResponse parses an HTTP response from a
// GetStudentsForContactWithResponse call
func ParseGetStudentsForContactResponse(
	rsp *http.Response,
) (*getStudentsForContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudentsForContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StudentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCoursesResponse parses an HTTP response from a
// GetCoursesWithResponse call
func ParseGetCoursesResponse(
	rsp *http.Response,
) (*getCoursesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getCoursesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CoursesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCourseResponse parses an HTTP response from a GetCourseWithResponse
// call
func ParseGetCourseResponse(rsp *http.Response) (*getCourseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getCourseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CourseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForCourseResponse parses an HTTP response from a
// GetDistrictForCourseWithResponse call
func ParseGetDistrictForCourseResponse(
	rsp *http.Response,
) (*getDistrictForCourseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForCourseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSectionsForCourseResponse parses an HTTP response from a
// GetSectionsForCourseWithResponse call
func ParseGetSectionsForCourseResponse(
	rsp *http.Response,
) (*getSectionsForCourseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSectionsForCourseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictAdminsResponse parses an HTTP response from a
// GetDistrictAdminsWithResponse call
func ParseGetDistrictAdminsResponse(
	rsp *http.Response,
) (*getDistrictAdminsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictAdminsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictAdminsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDistrictAdminResponse parses an HTTP response from a
// GetDistrictAdminWithResponse call
func ParseGetDistrictAdminResponse(
	rsp *http.Response,
) (*getDistrictAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictAdminResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForDistrictAdminResponse parses an HTTP response from a
// GetDistrictForDistrictAdminWithResponse call
func ParseGetDistrictForDistrictAdminResponse(
	rsp *http.Response,
) (*getDistrictForDistrictAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForDistrictAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictsResponse parses an HTTP response from a
// GetDistrictsWithResponse call
func ParseGetDistrictsResponse(
	rsp *http.Response,
) (*getDistrictsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDistrictResponse parses an HTTP response from a
// GetDistrictWithResponse call
func ParseGetDistrictResponse(
	rsp *http.Response,
) (*getDistrictResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse
// call
func ParseGetEventsResponse(rsp *http.Response) (*getEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEventResponse parses an HTTP response from a GetEventWithResponse
// call
func ParseGetEventResponse(rsp *http.Response) (*getEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchoolAdminsResponse parses an HTTP response from a
// GetSchoolAdminsWithResponse call
func ParseGetSchoolAdminsResponse(
	rsp *http.Response,
) (*getSchoolAdminsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolAdminsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolAdminsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSchoolAdminResponse parses an HTTP response from a
// GetSchoolAdminWithResponse call
func ParseGetSchoolAdminResponse(
	rsp *http.Response,
) (*getSchoolAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolAdminResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForSchoolAdminResponse parses an HTTP response from a
// GetDistrictForSchoolAdminWithResponse call
func ParseGetDistrictForSchoolAdminResponse(
	rsp *http.Response,
) (*getDistrictForSchoolAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForSchoolAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchoolsForSchoolAdminResponse parses an HTTP response from a
// GetSchoolsForSchoolAdminWithResponse call
func ParseGetSchoolsForSchoolAdminResponse(
	rsp *http.Response,
) (*getSchoolsForSchoolAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolsForSchoolAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchoolsResponse parses an HTTP response from a
// GetSchoolsWithResponse call
func ParseGetSchoolsResponse(
	rsp *http.Response,
) (*getSchoolsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSchoolResponse parses an HTTP response from a GetSchoolWithResponse
// call
func ParseGetSchoolResponse(rsp *http.Response) (*getSchoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForSchoolResponse parses an HTTP response from a
// GetDistrictForSchoolWithResponse call
func ParseGetDistrictForSchoolResponse(
	rsp *http.Response,
) (*getDistrictForSchoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForSchoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSectionsForSchoolResponse parses an HTTP response from a
// GetSectionsForSchoolWithResponse call
func ParseGetSectionsForSchoolResponse(
	rsp *http.Response,
) (*getSectionsForSchoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSectionsForSchoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStudentsForSchoolResponse parses an HTTP response from a
// GetStudentsForSchoolWithResponse call
func ParseGetStudentsForSchoolResponse(
	rsp *http.Response,
) (*getStudentsForSchoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudentsForSchoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StudentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTeachersForSchoolResponse parses an HTTP response from a
// GetTeachersForSchoolWithResponse call
func ParseGetTeachersForSchoolResponse(
	rsp *http.Response,
) (*getTeachersForSchoolResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTeachersForSchoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeachersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSectionsResponse parses an HTTP response from a
// GetSectionsWithResponse call
func ParseGetSectionsResponse(
	rsp *http.Response,
) (*getSectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSectionResponse parses an HTTP response from a
// GetSectionWithResponse call
func ParseGetSectionResponse(
	rsp *http.Response,
) (*getSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCourseForSectionResponse parses an HTTP response from a
// GetCourseForSectionWithResponse call
func ParseGetCourseForSectionResponse(
	rsp *http.Response,
) (*getCourseForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getCourseForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CourseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForSectionResponse parses an HTTP response from a
// GetDistrictForSectionWithResponse call
func ParseGetDistrictForSectionResponse(
	rsp *http.Response,
) (*getDistrictForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchoolForSectionResponse parses an HTTP response from a
// GetSchoolForSectionWithResponse call
func ParseGetSchoolForSectionResponse(
	rsp *http.Response,
) (*getSchoolForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStudentsForSectionResponse parses an HTTP response from a
// GetStudentsForSectionWithResponse call
func ParseGetStudentsForSectionResponse(
	rsp *http.Response,
) (*getStudentsForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudentsForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StudentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTeacherForSectionResponse parses an HTTP response from a
// GetTeacherForSectionWithResponse call
func ParseGetTeacherForSectionResponse(
	rsp *http.Response,
) (*getTeacherForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTeacherForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeacherResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTeachersForSectionResponse parses an HTTP response from a
// GetTeachersForSectionWithResponse call
func ParseGetTeachersForSectionResponse(
	rsp *http.Response,
) (*getTeachersForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTeachersForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeachersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTermForSectionResponse parses an HTTP response from a
// GetTermForSectionWithResponse call
func ParseGetTermForSectionResponse(
	rsp *http.Response,
) (*getTermForSectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTermForSectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TermResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStudentsResponse parses an HTTP response from a
// GetStudentsWithResponse call
func ParseGetStudentsResponse(
	rsp *http.Response,
) (*getStudentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StudentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStudentResponse parses an HTTP response from a
// GetStudentWithResponse call
func ParseGetStudentResponse(
	rsp *http.Response,
) (*getStudentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StudentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetContactsForStudentResponse parses an HTTP response from a
// GetContactsForStudentWithResponse call
func ParseGetContactsForStudentResponse(
	rsp *http.Response,
) (*getContactsForStudentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContactsForStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForStudentResponse parses an HTTP response from a
// GetDistrictForStudentWithResponse call
func ParseGetDistrictForStudentResponse(
	rsp *http.Response,
) (*getDistrictForStudentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchoolForStudentResponse parses an HTTP response from a
// GetSchoolForStudentWithResponse call
func ParseGetSchoolForStudentResponse(
	rsp *http.Response,
) (*getSchoolForStudentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolForStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchoolsForStudentResponse parses an HTTP response from a
// GetSchoolsForStudentWithResponse call
func ParseGetSchoolsForStudentResponse(
	rsp *http.Response,
) (*getSchoolsForStudentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolsForStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSectionsForStudentResponse parses an HTTP response from a
// GetSectionsForStudentWithResponse call
func ParseGetSectionsForStudentResponse(
	rsp *http.Response,
) (*getSectionsForStudentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSectionsForStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTeachersForStudentResponse parses an HTTP response from a
// GetTeachersForStudentWithResponse call
func ParseGetTeachersForStudentResponse(
	rsp *http.Response,
) (*getTeachersForStudentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTeachersForStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeachersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTeachersResponse parses an HTTP response from a
// GetTeachersWithResponse call
func ParseGetTeachersResponse(
	rsp *http.Response,
) (*getTeachersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTeachersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeachersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeacherResponse parses an HTTP response from a
// GetTeacherWithResponse call
func ParseGetTeacherResponse(
	rsp *http.Response,
) (*getTeacherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTeacherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeacherResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForTeacherResponse parses an HTTP response from a
// GetDistrictForTeacherWithResponse call
func ParseGetDistrictForTeacherResponse(
	rsp *http.Response,
) (*getDistrictForTeacherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForTeacherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchoolForTeacherResponse parses an HTTP response from a
// GetSchoolForTeacherWithResponse call
func ParseGetSchoolForTeacherResponse(
	rsp *http.Response,
) (*getSchoolForTeacherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolForTeacherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchoolsForTeacherResponse parses an HTTP response from a
// GetSchoolsForTeacherWithResponse call
func ParseGetSchoolsForTeacherResponse(
	rsp *http.Response,
) (*getSchoolsForTeacherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSchoolsForTeacherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchoolsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSectionsForTeacherResponse parses an HTTP response from a
// GetSectionsForTeacherWithResponse call
func ParseGetSectionsForTeacherResponse(
	rsp *http.Response,
) (*getSectionsForTeacherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSectionsForTeacherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStudentsForTeacherResponse parses an HTTP response from a
// GetStudentsForTeacherWithResponse call
func ParseGetStudentsForTeacherResponse(
	rsp *http.Response,
) (*getStudentsForTeacherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudentsForTeacherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StudentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTermsResponse parses an HTTP response from a GetTermsWithResponse
// call
func ParseGetTermsResponse(rsp *http.Response) (*getTermsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTermsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TermsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTermResponse parses an HTTP response from a GetTermWithResponse
// call
func ParseGetTermResponse(rsp *http.Response) (*getTermResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTermResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TermResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDistrictForTermResponse parses an HTTP response from a
// GetDistrictForTermWithResponse call
func ParseGetDistrictForTermResponse(
	rsp *http.Response,
) (*getDistrictForTermResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getDistrictForTermResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DistrictResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSectionsForTermResponse parses an HTTP response from a
// GetSectionsForTermWithResponse call
func ParseGetSectionsForTermResponse(
	rsp *http.Response,
) (*getSectionsForTermResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSectionsForTermResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
